#ifndef VX_CONFIG
#define VX_CONFIG

#include "lvgl/lvgl.h"
#include <linux/if_link.h>
#include <stdbool.h>

// #define VX_DEV

// Logic
#define VX_MAX_CPUS 64

#define VX_MAX_INPUT_INTERFACES 10
#define VX_MAX_OUTPUT_INTERFACES 10

#define VX_REFRESH_TIME 100000000L // = 100M -> 10fps | max 1000000000ns = 1s +000

#define VX_NETWORK_CHART_SIZE 800
#define VX_CPU_CHART_SIZE 400
#define VX_MEMORY_CHART_SIZE 400

#define VX_NETWORK_CHART_RANGE_SHIFT_MAX 8  // Maximum allowed shift for the chart range
#define VX_NETWORK_CHART_RANGE ((1 << VX_NETWORK_CHART_RANGE_SHIFT_MAX) - 1)  // Maximum positive value for the chart range
//#define VX_NETWORK_CHART_RANGE 256 // actually 80px high, leaving room for aliasing (?)

#define VX_CONFIG_FILE      "/vxspan.json"
#define VX_XDP_FILE         "/xdp_redirect.o"
#define VX_XDP_PROG_SECTION "xdp_vlan_filter"
#define VX_XDP_HW  XDP_FLAGS_UPDATE_IF_NOEXIST|XDP_FLAGS_HW_MODE
#define VX_XDP_DRV XDP_FLAGS_UPDATE_IF_NOEXIST|XDP_FLAGS_DRV_MODE
#define VX_XDP_SKB XDP_FLAGS_UPDATE_IF_NOEXIST|XDP_FLAGS_SKB_MODE
#define VX_XDP_MODE VX_XDP_SKB
/* xdp_mode tested against vmxnet3 on vmware workstation 17.0x and esxi 7.x
 * => skb >> drv
 */

// UI
#define VX_TITLE   "VxSpan"
#define VX_VERSION "0.1.1"
#define VX_FOOTNOTE "[b] bytes [p] packets [left/right] select interface [up/down/home/end] display vlan"

#define VX_RED_PALETTE    lv_palette_main(LV_PALETTE_RED)
#define VX_GREEN_PALETTE  lv_palette_main(LV_PALETTE_GREEN)
#define VX_BLUE_PALETTE   lv_palette_main(LV_PALETTE_BLUE)
#define VX_ORANGE_PALETTE lv_palette_main(LV_PALETTE_ORANGE)
#define VX_GREY_PALETTE   lv_palette_main(LV_PALETTE_GREY)
#define VX_PURPLE_PALETTE lv_palette_main(LV_PALETTE_PURPLE)
#define VX_GREY_COLOR  lv_color_hex(0x212529)
#define VX_WHITE_COLOR lv_color_hex(0xffffff)

#define VX_INPUT_RX_COLOR  VX_GREEN_PALETTE
#define VX_INPUT_RXD_COLOR VX_RED_PALETTE
#define VX_INPUT_TX_COLOR  VX_ORANGE_PALETTE
#define VX_INPUT_TXD_COLOR VX_PURPLE_PALETTE

#define VX_VLAN_RX_COLOR  VX_GREEN_PALETTE
#define VX_VLAN_RXD_COLOR VX_RED_PALETTE
#define VX_VLAN_TX_COLOR  VX_ORANGE_PALETTE
#define VX_VLAN_TXD_COLOR VX_PURPLE_PALETTE

#define VX_OUTPUT_RX_COLOR  VX_ORANGE_PALETTE
#define VX_OUTPUT_RXD_COLOR VX_PURPLE_PALETTE
#define VX_OUTPUT_TX_COLOR  VX_GREEN_PALETTE
#define VX_OUTPUT_TXD_COLOR VX_RED_PALETTE

// Static objects
static const char png_data[655] = {
	137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,32,0,0,0,28,8,6,0,0,0,
	0,194,189,34,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,2,73,73,68,65,84,72,
	75,237,87,77,107,19,81,20,61,111,62,58,201,56,45,129,32,26,17,109,21,4,55,
	93,91,165,139,44,186,80,108,55,6,92,136,85,11,130,59,165,104,211,54,105,
	210,78,163,5,45,20,4,23,46,138,40,254,129,22,252,15,174,10,145,174,220,184,
	42,81,196,77,19,103,38,31,243,70,222,11,73,51,157,41,78,108,107,178,200,
	221,204,188,119,223,189,239,220,115,46,151,25,178,245,101,171,38,10,162,
	136,14,25,201,111,231,157,14,221,205,175,237,78,0,217,116,10,97,85,3,181,
	109,148,203,6,194,97,13,148,82,148,45,3,33,85,131,227,56,176,204,18,223,
	103,102,154,37,132,194,26,8,33,176,140,18,148,144,10,65,16,248,190,162,168,
	96,10,179,253,133,101,29,34,113,171,237,97,160,88,44,34,155,206,242,75,56,
	69,132,240,167,223,186,93,223,216,88,28,215,111,142,187,20,63,16,128,254,
	240,36,206,157,146,112,63,87,224,1,31,50,49,24,166,131,71,175,190,35,17,
	239,199,196,168,134,73,125,207,103,219,192,131,231,5,92,30,236,195,220,100,
	212,229,99,181,220,91,46,160,109,0,231,79,75,60,144,217,251,133,24,76,43,
	24,128,217,187,81,87,28,139,255,39,0,131,49,201,85,73,43,3,55,70,52,76,189,
	240,103,96,230,78,148,179,193,236,93,42,6,65,56,6,0,173,18,48,118,40,221,
	147,160,21,0,147,46,176,4,201,167,207,120,179,213,106,20,146,36,240,6,172,
	86,109,94,137,44,215,187,151,173,101,73,4,72,253,125,191,175,177,246,243,
	177,124,44,239,92,58,133,72,36,226,157,3,211,143,167,255,203,76,202,44,101,
	122,0,186,148,1,214,0,141,73,120,28,205,208,214,32,234,1,232,49,208,49,6,
	14,186,120,62,57,3,203,170,5,194,197,198,249,218,235,181,64,103,125,63,201,
	118,139,187,24,232,31,112,37,56,44,0,229,247,87,148,79,92,242,128,242,0,
	120,251,99,3,59,246,47,126,80,63,51,213,12,208,179,139,168,84,234,12,24,
	134,225,91,157,210,39,67,148,100,238,203,173,228,154,103,134,62,79,52,223,
	191,93,217,116,197,122,0,172,20,62,194,116,42,30,0,141,40,203,50,157,249,
	100,170,254,157,182,207,174,141,94,197,173,68,194,179,223,22,0,22,189,254,
	243,19,110,71,226,208,100,213,147,140,233,187,250,114,213,151,129,11,23,
	135,124,1,56,180,138,179,219,79,176,51,252,230,239,18,4,234,156,35,60,212,
	21,255,5,121,0,195,71,88,84,224,84,148,82,251,15,239,125,169,239,33,179,32,
	170,0,0,0,0,73,69,78,68,174,66,96,130
};
static lv_img_dsc_t png_image_dsc = {
	.header = {
		.w = 32,
		.h = 28,
		.cf = LV_COLOR_FORMAT_ARGB8888
	},
	.data_size = 655,
	.data = png_data
};

typedef enum {
	VX_DISPLAY_NONE,
	VX_DISPLAY_BYTES,
	VX_DISPLAY_PACKETS
} vx_display_mode;

typedef struct Selector {
	void* selected;
	vx_display_mode display_mode;
} Selector;

int load_configuration();
void xdp_cleanup();

#endif
